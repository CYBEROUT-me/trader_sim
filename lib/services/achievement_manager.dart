import 'package:flutter/material.dart';
import '../models/game_state.dart';
import 'notification_system.dart';

class AchievementManager {
  static AchievementManager? _instance;
  static AchievementManager get instance {
    _instance ??= AchievementManager._();
    return _instance!;
  }
  
  AchievementManager._();
  
  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞
  void checkAchievements(BuildContext context, GameState gameState) {
    _checkFirstPurchase(context, gameState);
    _checkThousandDollars(context, gameState);
    _checkFirstMiningRig(context, gameState);
    _checkMillionaire(context, gameState);
    _checkFirstLuxury(context, gameState);
    _checkFiveLuxuries(context, gameState);
    _checkTraderDayAchievement(context, gameState);
    _checkHodlerAchievement(context, gameState);
  }
  
  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞"
  void _checkFirstPurchase(BuildContext context, GameState gameState) {
    final hasAnyCrypto = gameState.cryptos.any((crypto) => crypto.holding > 0);
    try {
      final achievement = gameState.achievements.firstWhere(
        (a) => a.title == '–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞',
      );
      
      if (hasAnyCrypto && !achievement.isCompleted) {
        achievement.complete();
        gameState.reputation += achievement.reputationReward;
        
        NotificationSystem.instance.showAchievement(context,
          title: achievement.title,
          description: achievement.description,
          reputationReward: achievement.reputationReward,
        );
      }
    } catch (e) {
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    }
  }
  
  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–¢—ã—Å—è—á–Ω–∏–∫"
  void _checkThousandDollars(BuildContext context, GameState gameState) {
    try {
      final achievement = gameState.achievements.firstWhere(
        (a) => a.title == '–¢—ã—Å—è—á–Ω–∏–∫',
      );
      
      if (gameState.balance >= 1000 && !achievement.isCompleted) {
        achievement.complete();
        gameState.reputation += achievement.reputationReward;
        
        NotificationSystem.instance.showAchievement(context,
          title: achievement.title,
          description: achievement.description,
          reputationReward: achievement.reputationReward,
        );
      }
    } catch (e) {
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    }
  }
  
  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ú–∞–π–Ω–µ—Ä"
  void _checkFirstMiningRig(BuildContext context, GameState gameState) {
    try {
      final achievement = gameState.achievements.firstWhere(
        (a) => a.title == '–ú–∞–π–Ω–µ—Ä',
      );
      
      if (gameState.miningRigs.isNotEmpty && !achievement.isCompleted) {
        achievement.complete();
        gameState.reputation += achievement.reputationReward;
        
        NotificationSystem.instance.showAchievement(context,
          title: achievement.title,
          description: achievement.description,
          reputationReward: achievement.reputationReward,
        );
      }
    } catch (e) {
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    }
  }
  
  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ú–∏–ª–ª–∏–æ–Ω–µ—Ä"
  void _checkMillionaire(BuildContext context, GameState gameState) {
    try {
      final achievement = gameState.achievements.firstWhere(
        (a) => a.title == '–ú–∏–ª–ª–∏–æ–Ω–µ—Ä',
      );
      
      if (gameState.balance >= 1000000 && !achievement.isCompleted) {
        achievement.complete();
        gameState.reputation += achievement.reputationReward;
        
        NotificationSystem.instance.showAchievement(context,
          title: achievement.title,
          description: achievement.description,
          reputationReward: achievement.reputationReward,
        );
      }
    } catch (e) {
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    }
  }
  
  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ú–æ–¥–Ω–∏–∫"
  void _checkFirstLuxury(BuildContext context, GameState gameState) {
    try {
      final achievement = gameState.achievements.firstWhere(
        (a) => a.title == '–ú–æ–¥–Ω–∏–∫',
      );
      
      if (gameState.ownedLuxuryItems.isNotEmpty && !achievement.isCompleted) {
        achievement.complete();
        gameState.reputation += achievement.reputationReward;
        
        NotificationSystem.instance.showAchievement(context,
          title: achievement.title,
          description: achievement.description,
          reputationReward: achievement.reputationReward,
        );
      }
    } catch (e) {
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    }
  }
  
  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä"
  void _checkFiveLuxuries(BuildContext context, GameState gameState) {
    try {
      final achievement = gameState.achievements.firstWhere(
        (a) => a.title == '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
      );
      
      if (gameState.ownedLuxuryItems.length >= 5 && !achievement.isCompleted) {
        achievement.complete();
        gameState.reputation += achievement.reputationReward;
        
        NotificationSystem.instance.showAchievement(context,
          title: achievement.title,
          description: achievement.description,
          reputationReward: achievement.reputationReward,
        );
      }
    } catch (e) {
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    }
  }
  
  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–¢—Ä–µ–π–¥–µ—Ä –¥–Ω—è"
  void _checkTraderDayAchievement(BuildContext context, GameState gameState) {
    try {
      final achievement = gameState.achievements.firstWhere(
        (a) => a.title == '–¢—Ä–µ–π–¥–µ—Ä –¥–Ω—è',
      );
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–¥–µ–ª–æ–∫ –∑–∞ –¥–µ–Ω—å
      // –ü–æ–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
      final totalTrades = gameState.cryptos.fold<int>(
        0, (sum, crypto) => sum + (crypto.holding > 0 ? 1 : 0)
      );
      
      if (totalTrades >= 10 && !achievement.isCompleted) {
        achievement.complete();
        gameState.reputation += achievement.reputationReward;
        
        NotificationSystem.instance.showAchievement(context,
          title: achievement.title,
          description: achievement.description,
          reputationReward: achievement.reputationReward,
        );
      }
    } catch (e) {
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    }
  }
  
  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–•–æ–¥–ª–µ—Ä"
  void _checkHodlerAchievement(BuildContext context, GameState gameState) {
    try {
      final achievement = gameState.achievements.firstWhere(
        (a) => a.title == '–•–æ–¥–ª–µ—Ä',
      );
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
      // –ü–æ–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –µ—Å–ª–∏ –µ—Å—Ç—å –ª—é–±–∞—è –ø–æ–∑–∏—Ü–∏—è
      final hasLongPosition = gameState.cryptos.any((crypto) => crypto.holding > 0);
      
      if (hasLongPosition && !achievement.isCompleted) {
        achievement.complete();
        gameState.reputation += achievement.reputationReward;
        
        NotificationSystem.instance.showAchievement(context,
          title: achievement.title,
          description: achievement.description,
          reputationReward: achievement.reputationReward,
        );
      }
    } catch (e) {
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    }
  }
  
  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
  void checkLevelUp(BuildContext context, GameState gameState, int oldLevel) {
    if (gameState.level > oldLevel) {
      NotificationSystem.instance.showLevelUp(context,
        newLevel: gameState.level,
        reputationGained: 10, // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
      );
    }
  }
  
  /// –£–≤–µ–¥–æ–º–∏—Ç—å –æ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–¥–µ–ª–∫–µ
  void notifyTrade(BuildContext context, {
    required String action,
    required String crypto,
    required double amount,
    required double totalPrice,
  }) {
    NotificationSystem.instance.showTrade(context,
      action: action,
      crypto: crypto,
      amount: amount,
      price: totalPrice,
    );
  }
  
  /// –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Ä–æ—Å–∫–æ—à–∏
  void notifyLuxuryPurchase(BuildContext context, {
    required String itemName,
    required int reputationBonus,
  }) {
    NotificationSystem.instance.showInfo(context,
      title: 'üíé –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!',
      message: '–ö—É–ø–ª–µ–Ω $itemName\n+$reputationBonus —Ä–µ–ø—É—Ç–∞—Ü–∏–∏',
    );
  }
  
  /// –£–≤–µ–¥–æ–º–∏—Ç—å –æ –¥–æ—Ö–æ–¥–µ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞ (–ø–∞–∫–µ—Ç–Ω–æ)
  void notifyMiningEarnings(BuildContext context, double totalEarnings) {
    if (totalEarnings > 10) { // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã
      NotificationSystem.instance.showMining(context,
        earnings: totalEarnings,
      );
    }
  }
  
  /// –£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏
  void notifyGameEvent(BuildContext context, {
    required String eventTitle,
    required String description,
  }) {
    NotificationSystem.instance.showEvent(context,
      eventTitle: eventTitle,
      description: description,
    );
  }
}